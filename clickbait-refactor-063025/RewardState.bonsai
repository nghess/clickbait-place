<?xml version="1.0" encoding="utf-8"?>
<WorkflowBuilder Version="2.8.1"
                 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                 xmlns:rx="clr-namespace:Bonsai.Reactive;assembly=Bonsai.Core"
                 xmlns:sys="clr-namespace:System;assembly=mscorlib"
                 xmlns:ipy="clr-namespace:Bonsai.Scripting.IronPython;assembly=Bonsai.Scripting.IronPython"
                 xmlns="https://bonsai-rx.org/2018/workflow">
  <Workflow>
    <Nodes>
      <!-- External poke states input -->
      <Expression xsi:type="ExternalizedMapping">
        <Property Name="Value" DisplayName="PokeStates" />
      </Expression>
      
      <!-- Subscribe to Current State -->
      <Expression xsi:type="SubscribeSubject">
        <Name>CurrentState</Name>
      </Expression>
      
      <!-- Subscribe to current reward states -->
      <Expression xsi:type="SubscribeSubject">
        <Name>RewardLeft</Name>
      </Expression>
      
      <Expression xsi:type="SubscribeSubject">
        <Name>RewardRight</Name>
      </Expression>
      
      <Expression xsi:type="SubscribeSubject">
        <Name>StateStartTime</Name>
      </Expression>
      
      <!-- Combine all inputs -->
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="rx:CombineLatest" />
      </Expression>
      
      <!-- Reward Logic -->
      <Expression xsi:type="ipy:PythonTransform">
        <ipy:Name>Reward Logic</ipy:Name>
        <ipy:Script>import clr
clr.AddReference("System")
from System import DateTime, Tuple

# Reward durations (in seconds)
REWARD_DURATION_LEFT = 0.032
REWARD_DURATION_RIGHT = 0.032

@returns(Tuple[bool, bool, bool, int, int, str])
def process(value):
    # Extract inputs
    poke_states = value.Item1
    current_state = value.Item2
    current_reward_left = value.Item3
    current_reward_right = value.Item4
    state_start_time = value.Item5
    
    if current_state != "Reward":
        return Tuple.Create(False, False, False, 0, 0, "Reward")
    
    poke_left = poke_states.Item1
    poke_right = poke_states.Item2
    
    current_time = DateTime.Now
    
    new_reward_left = current_reward_left
    new_reward_right = current_reward_right
    transition_to_withdrawal = False
    reward_left_count_increment = 0
    reward_right_count_increment = 0
    next_state = "Reward"
    
    # Check if current reward duration has elapsed
    if current_reward_left and (current_time - state_start_time).TotalSeconds &gt;= REWARD_DURATION_LEFT:
        new_reward_left = False
        transition_to_withdrawal = True
        next_state = "Withdrawal"
        
    elif current_reward_right and (current_time - state_start_time).TotalSeconds &gt;= REWARD_DURATION_RIGHT:
        new_reward_right = False
        transition_to_withdrawal = True
        next_state = "Withdrawal"
        
    # Check for new poke events (only if no current reward active)
    elif poke_left and not current_reward_left and not current_reward_right:
        new_reward_left = True
        reward_left_count_increment = 1
        
    elif poke_right and not current_reward_right and not current_reward_left:
        new_reward_right = True
        reward_right_count_increment = 1
    
    return Tuple.Create(
        new_reward_left,
        new_reward_right, 
        transition_to_withdrawal,
        reward_left_count_increment,
        reward_right_count_increment,
        next_state
    )
</ipy:Script>
      </Expression>
      
      <!-- Extract outputs -->
      <Expression xsi:type="MemberSelector">
        <Selector>Item1</Selector>
      </Expression>
      
      <Expression xsi:type="MemberSelector">
        <Selector>Item2</Selector>
      </Expression>
      
      <Expression xsi:type="MemberSelector">
        <Selector>Item3</Selector>
      </Expression>
      
      <Expression xsi:type="MemberSelector">
        <Selector>Item4</Selector>
      </Expression>
      
      <Expression xsi:type="MemberSelector">
        <Selector>Item5</Selector>
      </Expression>
      
      <Expression xsi:type="MemberSelector">
        <Selector>Item6</Selector>
      </Expression>
      
      <!-- Update Reward States -->
      <Expression xsi:type="MulticastSubject">
        <Name>RewardLeft</Name>
      </Expression>
      
      <Expression xsi:type="MulticastSubject">
        <Name>RewardRight</Name>
      </Expression>
      
      <!-- Update Reward Counts -->
      <Expression xsi:type="SubscribeSubject">
        <Name>RewardLeftCount</Name>
      </Expression>
      
      <Expression xsi:type="Add" />
      
      <Expression xsi:type="MulticastSubject">
        <Name>RewardLeftCount</Name>
      </Expression>
      
      <Expression xsi:type="SubscribeSubject">
        <Name>RewardRightCount</Name>
      </Expression>
      
      <Expression xsi:type="Add" />
      
      <Expression xsi:type="MulticastSubject">
        <Name>RewardRightCount</Name>
      </Expression>
      
      <!-- State Transition -->
      <Expression xsi:type="Condition">
      </Expression>
      
      <Expression xsi:type="MulticastSubject">
        <Name>CurrentState</Name>
      </Expression>
      
      <!-- Update State Start Time for Withdrawal -->
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="rx:Timestamp" />
      </Expression>
      
      <Expression xsi:type="MemberSelector">
        <Selector>Timestamp</Selector>
      </Expression>
      
      <Expression xsi:type="MulticastSubject">
        <Name>StateStartTime</Name>
      </Expression>
      
    </Nodes>
    <Edges>
      <Edge From="0" To="5" Label="Source1" />
      <Edge From="1" To="5" Label="Source2" />
      <Edge From="2" To="5" Label="Source3" />
      <Edge From="3" To="5" Label="Source4" />
      <Edge From="4" To="5" Label="Source5" />
      <Edge From="5" To="6" Label="Source1" />
      <Edge From="6" To="7" Label="Source1" />
      <Edge From="6" To="8" Label="Source1" />
      <Edge From="6" To="9" Label="Source1" />
      <Edge From="6" To="10" Label="Source1" />
      <Edge From="6" To="11" Label="Source1" />
      <Edge From="6" To="12" Label="Source1" />
      <Edge From="7" To="13" Label="Source1" />
      <Edge From="8" To="14" Label="Source1" />
      <Edge From="10" To="16" Label="Source2" />
      <Edge From="11" To="19" Label="Source2" />
      <Edge From="9" To="20" Label="Source1" />
      <Edge From="12" To="20" Label="Source2" />
      <Edge From="15" To="16" Label="Source1" />
      <Edge From="16" To="17" Label="Source1" />
      <Edge From="18" To="19" Label="Source1" />
      <Edge From="19" To="17" Label="Source1" />
      <Edge From="20" To="21" Label="Source1" />
      <Edge From="21" To="22" Label="Source1" />
      <Edge From="21" To="23" Label="Source1" />
      <Edge From="23" To="24" Label="Source1" />
      <Edge From="24" To="25" Label="Source1" />
    </Edges>
  </Workflow>
</WorkflowBuilder>