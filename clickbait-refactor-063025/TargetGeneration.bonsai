<?xml version="1.0" encoding="utf-8"?>
<WorkflowBuilder Version="2.8.1"
                 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                 xmlns:rx="clr-namespace:Bonsai.Reactive;assembly=Bonsai.Core"
                 xmlns:sys="clr-namespace:System;assembly=mscorlib"
                 xmlns:ipy="clr-namespace:Bonsai.Scripting.IronPython;assembly=Bonsai.Scripting.IronPython"
                 xmlns="https://bonsai-rx.org/2018/workflow">
  <Workflow>
    <Nodes>
      <!-- Subscribe to Flip State -->
      <Expression xsi:type="SubscribeSubject">
        <Name>FlipState</Name>
      </Expression>
      
      <!-- Subscribe to Grid Config -->
      <Expression xsi:type="SubscribeSubject">
        <Name>GridConfig</Name>
      </Expression>
      
      <!-- Combine inputs -->
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="rx:CombineLatest" />
      </Expression>
      
      <!-- Target Generation Logic -->
      <Expression xsi:type="ipy:PythonTransform">
        <ipy:Name>Generate Targets</ipy:Name>
        <ipy:Script>import clr
clr.AddReference("System")
from System import Array, Tuple
import math
import random

def generate_2d_distribution(x_size, y_size, mean_x=None, mean_y=None, 
                           sigma_x=None, sigma_y=None, log_normal=False,
                           log_sigma_x=0.5, log_sigma_y=0.5, flip_log_y=False):
    """Generate a 2D normal or log-normal distribution for IronPython."""
    if mean_x is None:
        mean_x = x_size / 2.0
    if mean_y is None:
        mean_y = y_size / 2.0
        
    if sigma_x is None:
        sigma_x = x_size / 6.0
    if sigma_y is None:
        sigma_y = y_size / 6.0
    
    if log_normal is True:
        log_x, log_y = True, True
    elif log_normal is False:
        log_x, log_y = False, False
    elif log_normal == 'x':
        log_x, log_y = True, False
    elif log_normal == 'y':
        log_x, log_y = False, True
    else:
        log_x, log_y = False, False
    
    distribution = []
    
    for y in range(y_size):
        for x in range(x_size):
            if log_x:
                log_mean_x = math.log(max(mean_x, 1e-10))
                x_pos = max(x + 1, 1e-10)
                z_x = math.exp(-((math.log(x_pos) - log_mean_x)**2 / (2 * log_sigma_x**2)))
            else:
                z_x = math.exp(-((x - mean_x)**2 / (2 * sigma_x**2)))
            
            if log_y:
                log_mean_y = math.log(max(mean_y, 1e-10))
                if flip_log_y:
                    y_flipped = y_size - y - 1
                    y_pos = max(y_flipped + 1, 1e-10)
                else:
                    y_pos = max(y + 1, 1e-10)
                z_y = math.exp(-((math.log(y_pos) - log_mean_y)**2 / (2 * log_sigma_y**2)))
            else:
                z_y = math.exp(-((y - mean_y)**2 / (2 * sigma_y**2)))
            
            z = z_x * z_y
            distribution.append(z)
    
    total_prob = sum(distribution)
    if total_prob > 0:
        distribution = [p / total_prob for p in distribution]
    
    return distribution

def generate_targets(grid_cells_x, grid_cells_y, max_targets_per_cell, flip_state):
    """Generate targets based on flip state configuration."""
    
    if flip_state == 0:
        config = {
            'mean_x': None, 'mean_y': 3, 'sigma_x': None, 'sigma_y': None,
            'log_normal': 'y', 'log_sigma_x': 0.5, 'log_sigma_y': 0.7, 'flip_log_y': False
        }
    else:
        config = {
            'mean_x': None, 'mean_y': 3, 'sigma_x': None, 'sigma_y': None,
            'log_normal': 'y', 'log_sigma_x': 0.5, 'log_sigma_y': 0.7, 'flip_log_y': True
        }
    
    inner_x = grid_cells_x - 2
    inner_y = grid_cells_y - 2
    
    if config['mean_x'] is None:
        config['mean_x'] = (inner_x - 1) / 2.0
    if config['mean_y'] is None:
        config['mean_y'] = (inner_y - 1) / 2.0
    if config['sigma_x'] is None:
        config['sigma_x'] = inner_x / 3.0
    if config['sigma_y'] is None:
        config['sigma_y'] = inner_y / 3.0
    
    base_distribution = generate_2d_distribution(
        inner_x, inner_y, 
        config['mean_x'], config['mean_y'], 
        config['sigma_x'], config['sigma_y'],
        config['log_normal'], 
        config['log_sigma_x'], config['log_sigma_y'], 
        config['flip_log_y']
    )
    
    max_prob = max(base_distribution) if base_distribution else 1.0
    target_counts = {}
    
    for i, prob in enumerate(base_distribution):
        scaled_targets = int((prob / max_prob) * (max_targets_per_cell - 1))
        target_counts[i] = scaled_targets
    
    target_queue = []
    for cell_idx, count in target_counts.items():
        for _ in range(count):
            target_queue.append(cell_idx)
    
    random.shuffle(target_queue)
    
    return target_queue, base_distribution

@returns(Tuple[Array[int], Array[float]])
def process(value):
    flip_state = value.Item1
    grid_config = value.Item2
    
    grid_cells_x, grid_cells_y = grid_config.Item1, grid_config.Item2
    max_targets_per_cell = 5
    
    target_queue, distribution = generate_targets(
        grid_cells_x, grid_cells_y, max_targets_per_cell, flip_state
    )
    
    queue_array = Array[int](target_queue)
    dist_array = Array[float](distribution)
    
    return Tuple.Create(queue_array, dist_array)
</ipy:Script>
      </Expression>
      
      <!-- Extract outputs -->
      <Expression xsi:type="MemberSelector">
        <Selector>Item1</Selector>
      </Expression>
      
      <Expression xsi:type="MemberSelector">
        <Selector>Item2</Selector>
      </Expression>
      
      <!-- Update Target Queue -->
      <Expression xsi:type="MulticastSubject">
        <Name>TargetQueue</Name>
      </Expression>
      
      <!-- Update Target Distribution -->
      <Expression xsi:type="MulticastSubject">
        <Name>TargetDistribution</Name>
      </Expression>
      
    </Nodes>
    <Edges>
      <Edge From="0" To="2" Label="Source1" />
      <Edge From="1" To="2" Label="Source2" />
      <Edge From="2" To="3" Label="Source1" />
      <Edge From="3" To="4" Label="Source1" />
      <Edge From="3" To="5" Label="Source1" />
      <Edge From="4" To="6" Label="Source1" />
      <Edge From="5" To="7" Label="Source1" />
    </Edges>
  </Workflow>
</WorkflowBuilder>